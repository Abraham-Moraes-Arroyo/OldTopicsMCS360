Week 1
------
Textbook, page 7: Self-Check Problem 1, 2.

Textbook, page 11: Self-Check Problem 1, 2 and 3.

Textbook, page 16: Self-Check Problem 1 and 2.

Textbook, page 16: Programming Problem 1.

Textbook, page 23: Self-Check Problem 1 and 2.


Week 2
------
Textbook, page 29: Self-Check Problem 1.

Consider an array int A[5] = {1,2,3,4,5}; Iterate over this with a for loop, printing side-by-side the arrays value and the address location.

Textbook, page 32: Self-Check Problem 1 and 2.

Textbook, page 32: Programming Problem 1 and 2.

Textbook, page 38: Programming Problem 1.


Week 3
------
In class we practiced call-by-value and call-by-constant-reference using the swap function. Repeat the same exercise using arrays instead of integer variables. The arrays can be integer arrays, both consisting of just 3 elements, for example, A = {1,2,3} and B = {4,5,6}. 

Prompt the user to enter a paragraph of text and store the text in a string variable. Print to screen the number of characters in the text.

Prompt the user to enter a file name of of some non-empty text file. Print to screen the number of characters in that text file.

Textbook, page 44: Self-Check Problem 1.

Textbook, page 58: Programming Problem 1 and 2.


Week 4
------

Write a class Coin, with a single method called toss(). When we use the method toss() on an instance of the Coin, toss method returns an integer value of 0 or 1.

Write a class Dice, with a single method called roll(). When we use the method roll() on an instance of the Dice, roll method returns an integer value between 1 and 6.

Write a class Square, generated by four points A, B, C, D, each with a (x,y) coordinates coordinates Ax, Ay, Bx, By, Cx, Cy, Dx, Dy. 
Implement the class such that we can generate instances using the following format:
S = Square(Ax, Ay, Bx, By, Cx, Cy, Dx, Dy) 
In addition write class member functions (methods)
area(), computes the area of the square. 
perimeter(), computes the perimeter of the square
center_of_square(), computes the xy-coordinate location of the center of the square 
shift(a,b), which shifts the instance of the square 'a' units in x direction, and 'b' units in y direction.
larger(), given two instances R1 and R2 of the class, the method larger returns the instance with the larger area, i.e. R1.larger(R2) 
Write a mlass member function show() which prints/produces the following output on screen:
"Square with corners at (Ax, Ay), (Bx, By), (Cx, Cy), (Dx, Dy), where Ax, Ay, Bx, By, etc. have been replaced with values that generated that instance to begin with.

Read Chapter 3 in our book in preparation for class-inheritance topic of next week.

Week 5
------
Exam week. No homework assigned.


Week 6
------

Consider a vector of integers v{5,7,2,3,7,8,9,0,1}. Using our text book as a resource or the following website: HTTP://WWW.surplus.com/reference/vector/vector/ , illustrate the use of the following vector functions: assign(), swap(), insert(), em place(), back, front(), at(), begin(), end(). You can chose any setting to illustrate the usage of these functions. The goal of this assignment is to become familiar with vector-type functions.

Rewrite the class Rectangle (Lecture 9) using the template method.

Rewrite the class Cylinder (Lecture 11) using the template method.


Week 7
------
Textbook, Chapter 4 (Linked List): Review : "Programming Project" Section: Problem 4; Problem 5;

Week 8
------
Write a doubly linked list, that is, each list node has contains information [previous, value, next], where previous and next are pointers to addresses of the previous/next element and value is just a spot where and integer can be stored. For example

HEAD null <- [perv, value, next] -> null TAIL 

1) Write an two additional functions, print_front and print_back which can print elements of such a list, starting on either end.
2) Write an insert functions, insert_front(int value), insert_back(int value), capable of inserting a new node on either end.
3) Write an insert function, insert_at_index(int value, int index), capable of inserting a new node at the specified index, where index counting starts at the head node.

Write a circular singly linked list, that is a list whose ends are connected with each other, and form a cycle. Write an insert type function, and print type function for such a list. 

Write a function, which uses ST stack, that can evaluate string expressions of the form * + 5 4 + 7 6 (representing (5+4)*(7+6)) or -*+5476 (representing ((5+4)*7)-6), using only operations +*-/. Note the use of parentheses, which can be used to fix the order of operations, even if they are not present in the original expression! (IE. you can add parentheses to the stack).

Week 9
------
Textbook, Chapter 6 (Queues): "Review Questions" Section: Question 2; Question 3, Question 5, Question 7; 
Textbook, Chapter 6 (Queues):  Review : "Programming Project" Section: Problem 5; 
Textbook, Chapter 7 (Recursion): "Exercises for Section 7.2": Programming Section: Problem 1, Problem 3 (this is memoization-like);
Textbook, Chapter 7 (Recursion): "Exercises for Section 7.3": Programming Section: Problem 1; 

Week 10
-------

Exam week. No homework.

Week 11
-------  
Construct a binary search tree for values v = {3,4,8,1,4,8,3,2,1,3,5,6,9} by hand, using conventions from the lectures.
Using per,in,post-order traversal, traverse the binary search tree above and show the resulting output.

Write a recursive function to return the height of a binary search tree.

Write a recursive function to return the the number of nodes of degree 1 in a binary search tree. 

Week 12
-------

Build a binary search tree using vector v = {3,4,8,1,4,8,3,2,1,3,5,6,9} and perform the pre-order, in-order, and post-order traversal. Write the node values 
as they would be printed had the computer performed the task.


Week 13
-------

Max-heapify the following vector v = {3,4,8,1,4,8,3,2,1,3,5,6,9} by hand so that we have a max-heap at the end, IE. each node satisfies the (max)heap property.

Min-heapify the following vector v = {3,4,8,1,4,8,3,2,1,3,5,6,9} by hand so that we have a min-heap at the end, IE. each node satisfies the (min)heap property.

Show all steps that heap_sort would perform on the vector v = {9,3,2,7,6,0,1,5,8,4} during the sorting, based on the min-heap.  

Show all steps that heap_sort would perform on the vector v = {9,3,2,7,6,0,1,5,8,4} during the sorting, based on the max-heap.  

Book, Exercises for Section 9.1, Self-Check: Problem 1.

Book, Exercises for Section 9.2, Self-Check: Problem 1, 2.

Book, Exercises for Section 9.2, Programming: Problem 1, 2, 3.
 

Week 14
-------
Show all steps, along with correct execution order, that recursive merge sort would perform while sorting values v = {3,4,8,1,4,8,3,2,1,3,5,6,9}.

Show all steps, along with correct execution order, that recursive quick sort would perform while sorting values v = {3,4,8,1,4,8,3,2,1,3,5,6,9}
